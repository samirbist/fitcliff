-- DROP SCHEMA public;

CREATE SCHEMA public AUTHORIZATION pg_database_owner;


-- Drop table

-- DROP TABLE public.duration;

CREATE TABLE public.duration (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	duration varchar(255) NOT NULL,
	CONSTRAINT duration_duration_key UNIQUE (duration),
	CONSTRAINT duration_pkey PRIMARY KEY (id)
);

-- Permissions

ALTER TABLE public.duration OWNER TO postgres;
GRANT ALL ON TABLE public.duration TO postgres;

-- public.image definition

-- Drop table

-- DROP TABLE public.image;

CREATE TABLE public.image (
    id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	created_on date NULL,
	file_name varchar(255) NULL,
	mongo_id varchar(255) NULL,
	is_active bool NOT NULL DEFAULT true,
	CONSTRAINT image_pkey PRIMARY KEY (id)
);

-- Permissions

ALTER TABLE public.image OWNER TO postgres;
GRANT ALL ON TABLE public.image TO postgres;


-- public.customer definition

-- Drop table

-- DROP TABLE public.customer;

CREATE TABLE public.customer (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	first_name varchar(255) NOT NULL,
	gender varchar(255) NOT NULL,
	last_name varchar(255) NOT NULL,
	birthdate date NULL,
	is_active bool NOT NULL,
	join_date date NOT NULL,
	last_date date NOT NULL,
	reg_date date NOT NULL,
	image_id int8 NOT NULL,
	phone varchar(50) NOT NULL,
	address varchar(1000) NOT NULL,
	email varchar(255) NULL,
	membership_amount varchar(255) NOT NULL,
	CONSTRAINT customer_gender_check CHECK (((gender)::text = ANY ((ARRAY['MALE'::character varying, 'FEMALE'::character varying])::text[]))),
	CONSTRAINT customer_image_id_key UNIQUE (image_id),
	CONSTRAINT customer_pkey PRIMARY KEY (id),
	CONSTRAINT cutomer_image FOREIGN KEY (image_id) REFERENCES public.image(id)
	
);

ALTER TABLE public.customer ADD COLUMN customer_text_idx tsvector;

-- Create a function to update the tsvector column
CREATE OR REPLACE FUNCTION update_customer_text_idx() RETURNS trigger AS $$
BEGIN
   NEW.customer_text_idx := to_tsvector('english', 
       coalesce(NEW.first_name, '') || ' ' || 
       coalesce(NEW.last_name, '') || ' ' || 
       coalesce(NEW.address, '') || ' ' || 
       coalesce(NEW.email, '') || ' ' || 
	   coalesce(NEW.phone, ''));
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger
CREATE TRIGGER trigger_update_customer_text_idx
BEFORE INSERT OR UPDATE ON public.customer
FOR EACH ROW
EXECUTE FUNCTION update_customer_text_idx();

CREATE INDEX idx_fts ON public.customer USING gin(customer_text_idx);



-- Permissions

ALTER TABLE public.customer OWNER TO postgres;
GRANT ALL ON TABLE public.customer TO postgres;




-- public.ind_customer_payment definition

-- Drop table

-- DROP TABLE public.ind_customer_payment;

CREATE TABLE public.ind_customer_payment (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	"date" date NOT NULL,
	customer_id int8 NOT NULL,
	membership_duration_id int8 NOT NULL,
	amount varchar(255) NOT NULL,
	payment_type varchar(255) NOT NULL,
	pending_amount varchar(255) NULL,
	CONSTRAINT ind_customer_payment_payment_type_check CHECK (((payment_type)::text = ANY ((ARRAY['CASH'::character varying, 'UPI'::character varying])::text[]))),
	CONSTRAINT ind_customer_payment_pkey PRIMARY KEY (id),
	CONSTRAINT payment_customer FOREIGN KEY (customer_id) REFERENCES public.customer(id),
	CONSTRAINT payment_duration FOREIGN KEY (membership_duration_id) REFERENCES public.duration(id)
);

-- Permissions

ALTER TABLE public.ind_customer_payment OWNER TO postgres;
GRANT ALL ON TABLE public.ind_customer_payment TO postgres;





CREATE TABLE public."role" (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	"name" varchar(255) NULL,
	CONSTRAINT role_pkey PRIMARY KEY (id)
);

-- Permissions

ALTER TABLE public."role" OWNER TO postgres;
GRANT ALL ON TABLE public."role" TO postgres;

-- public.users definition

-- Drop table

-- DROP TABLE public.users;

CREATE TABLE public.users (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	role_fk int8 NOT NULL,
	display_name varchar(255) NULL,
	email varchar(255) NULL,
	"password" varchar(255) NULL,
	user_name varchar(255) NOT NULL,
	CONSTRAINT users_pkey PRIMARY KEY (id),
	CONSTRAINT users_user_name_key UNIQUE (user_name)
);

-- Permissions

ALTER TABLE public.users OWNER TO postgres;
GRANT ALL ON TABLE public.users TO postgres;


-- public.users foreign keys

ALTER TABLE public.users ADD CONSTRAINT user_role_fk FOREIGN KEY (role_fk) REFERENCES public."role"(id);

-- public.userphone definition

-- Drop table

-- DROP TABLE public.userphone;

CREATE TABLE public.userphone (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	user_fk int8 NOT NULL,
	"number" varchar(255) NULL,
	CONSTRAINT userphone_pkey PRIMARY KEY (id)
);

-- Permissions

ALTER TABLE public.userphone OWNER TO postgres;
GRANT ALL ON TABLE public.userphone TO postgres;


-- public.userphone foreign keys

ALTER TABLE public.userphone ADD CONSTRAINT phone_user_fk FOREIGN KEY (user_fk) REFERENCES public.users(id);
-- Permissions

GRANT ALL ON SCHEMA public TO pg_database_owner;
GRANT USAGE ON SCHEMA public TO public;

INSERT INTO public."role"
( "name")
VALUES('ADMIN');

INSERT INTO public.users
(role_fk, display_name, email, "password", user_name)
VALUES(1, 'fitcliffadmin', 'samir.bist@gmail.com', 'fitcliffadmin', 'fitcliffadmin');

INSERT INTO public.userphone
(user_fk, "number")
VALUES(1, '9868214732');

INSERT INTO public.duration
(duration)
VALUES('1 month');

INSERT INTO public.duration
(duration)
VALUES('3 months');

INSERT INTO public.duration
(duration)
VALUES('6 months');

INSERT INTO public.duration
(duration)
VALUES('1 year');